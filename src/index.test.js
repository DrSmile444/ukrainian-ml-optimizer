const {
  optimizeText,
  removeEmail,
  removeExtraSpaces,
  removeLatinPartialLetters,
  removeMention,
  removeNumber,
  removeSpecialSymbols,
  removeStopWords,
  removeUrl,
  stemText,
} = require('./index');

describe('Module Test', () => {
  describe('removeExtraSpaces', () => {
    it('should remove extra spaces', () => {
      expect(removeExtraSpaces(' test  test test ')).toEqual('test test test');
    });

    it('should leave as it is if no extra spaces', () => {
      expect(removeExtraSpaces('123 123 123')).toEqual('123 123 123');
    });
  });

  describe('removeSpecialSymbols', () => {
    it('should remove special symbols', () => {
      expect(removeSpecialSymbols('123 asd —Ñ—ñ–≤ @!?#$%^&*()_-=+\\/[]{}.,`\'"¬ß¬±~')).toEqual('123 asd —Ñ—ñ–≤                              ');
    });

    it('should leave as it is if no special symbols', () => {
      expect(removeSpecialSymbols('regular —Ç–µ—Å—Ç —Å—Ç—Ä–æ–∫–∞ —ñ ')).toEqual('regular —Ç–µ—Å—Ç —Å—Ç—Ä–æ–∫–∞ —ñ ');
    });
  });

  describe('removeStopWords', () => {
    it('should remove stop words', () => {
      expect(removeStopWords('–∞–±–∏ —è –ø–æ–±–∞—á–∏–≤ —Ü–µ, —è –±–∏ –∑–¥–∏–≤—É–≤–∞–≤—Å—è')).toEqual('–∞–±–∏ —è –ø–æ–±–∞—á–∏–≤ —Ü–µ, —è –∑–¥–∏–≤—É–≤–∞–≤—Å—è');
    });

    it('should leave as it is if no stop words', () => {
      expect(removeStopWords('–ø–æ–±–∞—á–∏–≤ —Ü–µ, –∑–¥–∏–≤—É–≤–∞–≤—Å—è')).toEqual('–ø–æ–±–∞—á–∏–≤ —Ü–µ, –∑–¥–∏–≤—É–≤–∞–≤—Å—è');
    });
  });

  describe('stemText', () => {
    it('it should stem the word', () => {
      expect(stemText('—Ç–∏')).toEqual('—Ç–∏');
      expect(stemText('–≤–µ—Å–Ω–∞')).toEqual('–≤–µ—Å–Ω');
      expect(stemText('–º—ñ—Å—å–∫–∏–π')).toEqual('–º—ñ—Å—å–∫');
      expect(stemText('–øi–¥–≤–æ–¥–Ω–∞')).toEqual('–øi–¥–≤–æ–¥–Ω');
      expect(stemText('–øi–¥–≤–æ–¥–Ω–∏–π')).toEqual('–øi–¥–≤–æ–¥–Ω');
      expect(stemText('–∑–¥–∏–≤—É–≤–∞–≤—Å—è')).toEqual('–∑–¥–∏–≤—É–≤–∞–≤');
      // Expected result but this stemmer works more aggressive.
      // expect(stemText('–≤–∏—è–≤–ª—è—î—Ç—å—Å—è')).toEqual('–≤–∏—è–≤–ª—è—î—Ç—å—Å');
      expect(stemText('–≤–∏—è–≤–ª—è—î—Ç—å—Å—è')).toEqual('–≤–∏—è–≤–ª—è—î—Ç');
    });
  });

  describe('removeEmail', () => {
    it('should remove email', () => {
      expect(removeEmail('test@test.com 123')).toEqual(' 123');
      expect(removeEmail('123 @mention 123')).toEqual('123 @mention 123');
    });
  });

  describe('removeMention', () => {
    it('should remove the mention', () => {
      expect(removeMention('test @mention 123')).toEqual('test  123');
      expect(removeMention('test @mention_BY @mention_BY')).toEqual('test  ');
      expect(removeMention('test 123')).toEqual('test 123');
      expect(removeMention('test @mention')).toEqual('test ');
      expect(removeMention('test test@gmail.com')).toEqual('test test');
      expect(removeMention('test test@gmail.com ')).toEqual('test test ');
    });
  });

  describe('removeUrl', () => {
    it('should remove url from text', () => {
      expect(removeUrl('https://test.com/go-here please visit my site')).toEqual(' please visit my site');
      expect(removeUrl('please visit my site https://test.com/go-here')).toEqual('please visit my site ');
      expect(removeUrl('please visit my site https://test.com/go-here please')).toEqual('please visit my site  please');
      expect(removeUrl('please visit my site')).toEqual('please visit my site');
    });
  });

  describe('removeNumber', () => {
    it('should remove numbers', () => {
      expect(removeNumber('123 asd')).toEqual(' asd');
      expect(removeNumber('asd @mention')).toEqual('asd @mention');
    });
  });

  describe('removeLatinPartialLetters', () => {
    it('should remove letters', () => {
      expect(removeLatinPartialLetters('te—Å—Ç —Ç–µ—Å—Ç')).toEqual('—Ç–µ—Å—Ç —Ç–µ—Å—Ç');
      expect(removeLatinPartialLetters('test test')).toEqual('test test');
      expect(removeLatinPartialLetters('—Ç–µ—Å—Ç —Ç–µ–∫—Å—Ç —ñ—ó“ë test')).toEqual('—Ç–µ—Å—Ç —Ç–µ–∫—Å—Ç —ñ—ó“ë —Ç–µ—Å—Ç');
    });
  });

  describe('optimizeText', () => {
    it('should optimize text', () => {
      expect(optimizeText('–∞–±–∏ —è –ø–æ–±–∞—á–∏–≤ —Ü–µ, —è –±–∏ –∑–¥–∏–≤—É–≤–∞–≤—Å—è!!!  12  3 test@ üòù')).toEqual('–∞–± —è –ø–æ–±–∞—á —Ü–µ —è –∑–¥–∏–≤—É–≤–∞–≤ test');
      expect(optimizeText('–∞–±–∏ —è @mention email@test.com —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π —Å–∏–º–≤–æ–ª üòù')).toEqual('–∞–± —è —Å–ø–µ—Ü—ñ–∞–ª—å–Ω —Å–∏–º–≤–æ–ª');
      expect(optimizeText('—Ü–µ –Ω–∞—à—ñ?')).toEqual('—Ü–µ –Ω–∞—à');
      expect(optimizeText('—â–æ—Å—å –Ω–µ –∑–Ω–∞–π—à–æ–≤ –Ω–∞—à—ñ?')).toEqual('—â–æ—Å—å –Ω–µ –∑–Ω–∞–π—à–æ–≤ –Ω–∞—à');
    });
  });
});
