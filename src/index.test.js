const { optimizeText, removeExtraSpaces, removeSpecialSymbols, removeStopWords } = require('./index');

describe('Module Test', () => {
  describe('removeExtraSpaces', () => {
    it('should remove extra spaces', () => {
      expect(removeExtraSpaces(' test  test test ')).toEqual('test test test');
    });

    it('should leave as it is if no extra spaces', () => {
      expect(removeExtraSpaces('123 123 123')).toEqual('123 123 123');
    });
  });

  describe('removeSpecialSymbols', () => {
    it('should remove special symbols', () => {
      expect(removeSpecialSymbols('123 asd —Ñ—ñ–≤ @!?#$%^&*()_-=+\\/[]{}.,`\'"¬ß¬±~')).toEqual('123 asd —Ñ—ñ–≤                              ');
    });

    it('should leave as it is if no special symbols', () => {
      expect(removeSpecialSymbols('regular —Ç–µ—Å—Ç —Å—Ç—Ä–æ–∫–∞ —ñ ')).toEqual('regular —Ç–µ—Å—Ç —Å—Ç—Ä–æ–∫–∞ —ñ ');
    });
  });

  describe('removeStopWords', () => {
    it('should remove stop words', () => {
      expect(removeStopWords('–∞–±–∏ —è –ø–æ–±–∞—á–∏–≤ —Ü–µ, —è –±–∏ –∑–¥–∏–≤—É–≤–∞–≤—Å—è')).toEqual('–ø–æ–±–∞—á–∏–≤ —Ü–µ, –∑–¥–∏–≤—É–≤–∞–≤—Å—è');
    });

    it('should leave as it is if no stop words', () => {
      expect(removeStopWords('–ø–æ–±–∞—á–∏–≤ —Ü–µ, –∑–¥–∏–≤—É–≤–∞–≤—Å—è')).toEqual('–ø–æ–±–∞—á–∏–≤ —Ü–µ, –∑–¥–∏–≤—É–≤–∞–≤—Å—è');
    });
  });

  describe('optimizeText', () => {
    it('should optimize text', () => {
      expect(optimizeText('–∞–±–∏ —è –ø–æ–±–∞—á–∏–≤ —Ü–µ, —è –±–∏ –∑–¥–∏–≤—É–≤–∞–≤—Å—è!!!  12  3 test@ üòù')).toEqual('–ø–æ–±–∞—á–∏–≤ —Ü–µ –∑–¥–∏–≤—É–≤–∞–≤—Å—è 12 3 test');
    });
  });
});
